10,04-14,04
1) Виправіть помилки і створіть кілька нових об'єктів: https://drive.google.com/file/d/19neYpxlEjfgYZqLzGea89-8MRo-HlphP/view?usp=share_link
2) Виправіть клас, додайте метод set: https://drive.google.com/file/d/1acle5Mz8a1Ycp7tswGSzTOzEzlha7-ZV/view?usp=share_link
3) Доробіть 2 нових методи - get_aria i changet (перевіряє чи змінювалась сторона): https://drive.google.com/file/d/1eSOjNRHzxxLPNSe3d4vyGxIgLXyEhrnN/view?usp=share_link

Lab 5.1.1 Classes and Objects in C++
Lab 5.1.2 Restricting access to object data
Lab 5.1.3 Obtaining derived data from an object

Завдання 1(5,1,1)
#include <iostream>
#include <string>

using namespace std;

class Person
{
	public:
		string name;
		int age;
		string lastName;
};
string FirstLastName(Person* person)
{
	return person->name + " " + person->lastName;
}
void print(Person* person)
{
	cout << FirstLastName(person) << " is " << person->age << " years old" << endl;
}


int main()
{
	Person person;
	person.name = "Marry";
	person.age = 20;
	person.lastName = "Harson";
	cout << "Meet " << person.name << "\n";
	print(&person); printf("\n");
	
	return 0;
}





Завдання 2(5,1,2)
#include <iostream>
#include <string>
using namespace std;
class Square
{
private:
    double side;
    double area;
public:
    Square(double side);
    void set_side(double side);
    void print();
};
void Square::set_side(double side)
{
    if (side < 0)
    {
        this->side = side;
        this->area = 0;
    }
    else
    {
        this->side = side;
        this->area = side * side;
    }
}
Square::Square(double side)
{
    set_side(side);
}
void Square::print()
{
    cout << "Square: side=" << this->side << " area=" << this->area << endl;
}
int main()
{
    Square s(4);
    s.print();
    s.set_side(2.0);
    s.print();
    s.set_side(-33.0);
    s.print();
    return 0;
}



Завдання 3(5,1,3)
#include <iostream>
#include <string>
using namespace std;
class AdHocSquare
{
public:
    AdHocSquare(double side);
    void set_side(double side);
    double get_area();
private:
    double side;
};
AdHocSquare::AdHocSquare(double side)
{
    set_side(side);
}
double AdHocSquare::get_area()
{
    double  area;
    if (this->side < 0)
    {
        area = 0;
    }
    else
    {
        area = this->side * this->side;
    }
    return area;
}
void AdHocSquare::set_side(double side)
{
    this->side = side;
}
class LazySquare
{
public:
    LazySquare(double side);
    void set_side(double side);
    double get_area();
private:
    double side;
    double area;
    bool side_changed;
};
LazySquare::LazySquare(double side)
{
    set_side(side);
}
double LazySquare::get_area()
{
    if (this->side_changed)
    {
        if (this->side < 0)
        {
            this->area = 0;
        }
        else
        {
            this->area = this->side * this->side;
        }
        return this->area;
    }
    else
    {
        return this->area;
    }

}
void LazySquare::set_side(double side)
{
    if (this->side == side)
    {
        this->side_changed = false;
    }
    else
    {
        this->side = side;
        this->side_changed = true;
    }
}
int main()
{
    AdHocSquare s(4);
    cout << s.get_area() << endl;
    s.set_side(2.0);
    cout << s.get_area() << endl;
    s.set_side(-33.0);
    cout << s.get_area() << endl;

    LazySquare ls(4);
    cout << ls.get_area() << endl;

    cout << ls.get_area() << endl;

    ls.set_side(2.0);
    cout << ls.get_area() << endl;
    ls.set_side(-33.0);
    cout << ls.get_area() << endl;

    return 0;
}

