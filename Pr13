8,05-12,05
1. Виведення символів у вигляді малюнка: https://drive.google.com/file/d/1jJntFuU43RTNeEpMRI7ywyAC9mpq9aXR/view?usp=share_link
2. Перевірка ІР адреси: https://drive.google.com/file/d/1O7cEsfA_wJj2YwhGMVuBqXremsA-fOEH/view?usp=share_link

Lab 6.3.1 Polymorphism: part 1
Lab 6.3.1 Polymorphism: part 3

завдання 1 (6.3.1)
#include <iostream>
#include <vector>
using namespace std;

class Baza{

public:
	virtual void Draw(){
		for (int i = 0; i < 4; i++)
		{
			if (i == 0)
			{
				cout << " ";
			}
			else if (i == 1)
			{
				cout << "/";
			}
			else if (i == 2)
			{
				cout << "\\";
			}
			else
			{
				cout << " " << endl;
			}

		}
	}
};
class LineDraw : public Baza
{
	void Draw() override
	{
		Baza::Draw();
		for (int i = 4; i < 8; i++)
		{
			if (i == 4 || i == 5)
			{
				cout << "/";
			}
			else if (i == 6)
			{
				cout << "\\";
			}
			else
			{
				cout << "\\" << endl;
			}
		}
	}
};
class StarDraw : public Baza
{
	void Draw() override
	{
		Baza::Draw();
		for (int i = 4; i < 8; i++)
		{
			if (i == 4)
			{
				cout << "/";
			}
			else if (i == 5 || i == 6)
			{
				cout << "*";
			}
			else
			{
				cout << "\\" << endl;
			}
		}
	}
};
class PlusDraw : public Baza
{
	void Draw() override
	{
		Baza::Draw();
		for (int i = 4; i < 8; i++)
		{
			if (i == 4)
			{
				cout << "/";
			}
			else if (i == 5 || i == 6)
			{
				cout << "+";
			}
			else
			{
				cout << "\\" << endl;
			}
		}
	}
};
int main()
{
    Baza* b =new LineDraw();
    Baza* b1=new StarDraw();
    Baza* b2=new PlusDraw();
    vector<Baza*> d3;
    d3.push_back(b);d3.push_back(b1);d3.push_back(b2);
    for (int i = 0; i < d3.size(); i++) { 
        cout<<"Drawing "<< 1+i<<":\n";
        d3[i]->Draw();
    }
    return 0;
}










завдання 2 (6.3.1)
#include <iostream>
#include <string>
#include <vector>

using namespace std;
class IPAddress
{
protected:
	string ipAdd;
public:
	IPAddress(string ip)
	{
		this->ipAdd = ip;
	}
	virtual void print();
};
void IPAddress::print()
{
	cout << this->ipAdd;
}
class IPAddressChecked : public IPAddress
{
private:
	bool cor;
public:
	IPAddressChecked(string ip) : IPAddress(ip) 
	{ }
	void print() override
	{
		IPAddress::print();
		vector<string> separator;
		string str;
		for (int i = 0; i < ipAdd.length(); i++) {
		    if(ipAdd[i]=='.'){
		       separator.push_back(str);
		       str="";continue;
		    } 
		    str+=ipAdd[i];
		    if(1+i==ipAdd.length())separator.push_back(str);
		}
		if (separator.size() != 4)
		{
			this->cor = false;
		}
		else
		{
			for (int i = 0; i < separator.size(); i++)
			{
				if (atoi(separator[i].c_str()) < 0 || atoi(separator[i].c_str()) > 255)
				{
					this->cor = false;
					break;
				}
				this->cor = true;
			}
		}
		if (this->cor)
			cout << " - Correct";
		else
			cout << " - Not correct";
	}
};
int main()
{string firstIP, secondIP, thirdIP;
	cout << "Enter the first ip-address: ";
	cin >> firstIP;
	IPAddress* first = new IPAddress(firstIP);
	first->print();
	cout << "\n Enter the second ip-address: ";
	cin >> secondIP;
	IPAddressChecked* second = new IPAddressChecked(secondIP);
	second->print();
	cout << "\n Enter the third ip-address: ";
	cin >>thirdIP;
	IPAddressChecked* third = new IPAddressChecked(thirdIP);
	third->print();
    return 0;
}
