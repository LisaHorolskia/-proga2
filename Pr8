27.03-31.03
"Рядки (шаблон): https://drive.google.com/file/d/1wyE3lNfoKaFvWcoy40u7uf-LeSXXwGWB/view?usp=share_link
Валідатор пароля: https://drive.google.com/file/d/1deXmEYS7jOi36YxL3FTsPiMIxWivJMbi/view?usp=share_link"	
	
Валідатор пароля:

#include <iostream>
#include <string>
#include <vector>
#include <regex>
#include <algorithm>
#include <cctype>
#include <map>
#include <iterator>

bool has_any_digits(const std::string& s){
		return std::any_of(s.begin(), s.end(), ::isdigit);
	}

bool has_any_special_character(const std::string& str){
		return std::any_of(str.begin(), str.end(), [](char c) {
		return !std::isalnum(c);
	});
	}

std::string ValPass(const std::string& pword){
	if (pword.length() != 8)
		return "The password must have 8 characters long";
	else if (!has_any_digits(pword))
		return "The password must have at least one digit";
	else if (!std::any_of(pword.begin(), pword.end(), ::isupper))
		return "The password must have at least one upper-case letter";
	else if (!std::any_of(pword.begin(), pword.end(), ::islower))
		return "The password must have at least one lower-case letter";
	else if (!has_any_special_character(pword))
		return "The password must have at least one special character";
	else
		return "The password has been validated";
	}

int main(){
std::cout << "Enter the password: ";
std::string pword;
getline(std::cin, pword);
std::string valRes = ValPass(pword);
std::cout << valRes;

return 0;
}


Рядки(шаблон):

#include <iostream>
#include <string>
#include <vector>
#include <regex>
#include <algorithm>
#include <cctype>
#include <map>
#include <iterator>

using namespace std;

void tokenize(string const &str, const char delim, vector<string> &out){
	size_t start;
	size_t end = 0;
	while ((start = str.find_first_not_of(delim, end)) != string::npos){
		end = str.find(delim, start);
		out.push_back(str.substr(start, end - start));
	}
}

string GetTemplate(string values, string templateStr){
	map <string, string> myMap;
	const char delim = ',';
	vector<string> out;
	tokenize(values, delim, out);
	for (int i = 0; i < out.size(); i++){
		int equalPos = out[i].find('=');
		myMap.insert(pair<string, string>(out[i].substr(0, equalPos), out[i].substr(equalPos + 1)));
	}
	string subRes = "";
	bool open = false;
	bool check = false;
	size_t pos = 0;
	for (int i = 0; i < templateStr.length(); i++){
		if (templateStr[i] == '['){
			open = true;
			pos = templateStr.find('[', i - 1);
		}
		else if (templateStr[i] == ']'){
			open = false;
			subRes = "";
		}
		if (open && templateStr[i] != '['){
			subRes += templateStr[i];
		}
		if (myMap.find(subRes) != myMap.end()){
			int diff = subRes.length() + 2 - myMap[subRes].length();
			i -= diff; i += 2;
			templateStr.replace(pos, subRes.length() + 2, myMap[subRes]);
			subRes = "";
			open = false;
		}
	}
	return templateStr;
}

int main()
{
	cout << "Enter values: ";
	string values;
	getline(std::cin, values);
	cout << "Enter templates: ";
	string templateStr;
	getline(std::cin, templateStr);
	templateStr = GetTemplate(values, templateStr);
	std::cout << templateStr << "\n";

	return 0;
}
